<!-- Add Liquid Ajax Cart -->
<script src="https://cdn.jsdelivr.net/npm/liquid-ajax-cart@2.3.0/liquid-ajax-cart.js" defer="defer"></script>
<link href="https://cdn.jsdelivr.net/npm/liquid-ajax-cart@2.3.0/liquid-ajax-cart.css" rel="stylesheet">

<!-- Initialize Liquid Ajax Cart -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof window.liquidAjaxCart === 'undefined') {
      console.warn('Liquid Ajax Cart not loaded, falling back to standard cart functionality');
    }
  });
</script>

{%- style -%}
  .bundle-builder {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .bundle-builder__header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .bundle-builder__title {
    font-size: 2.5rem;
    margin-bottom: 2rem;
  }

  /* Filter controls */
  .bundle-filter-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    justify-content: center;
  }

  .bundle-filter-button {
    padding: 0.75rem 1.5rem;
    border: none;
    background: transparent;
    font-size: 1rem;
    cursor: pointer;
    color: #666;
    transition: color 0.3s ease;
  }

  .bundle-filter-button.active {
    color: #000;
    font-weight: 500;
  }

  /* Product grid */
  .bundle-builder__products {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
    margin: 2rem 0;
  }

  @media screen and (max-width: 1024px) {
    .bundle-builder__products {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media screen and (max-width: 768px) {
    .bundle-builder__products {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
  }

  /* Product card */
  .bundle-product-card {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    border-radius: 8px;
    background: #ffffff;
  }

  .bundle-product-image {
    width: 100%;
    aspect-ratio: 1;
    object-fit: cover;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .bundle-product-title {
    font-size: 1rem;
    margin: 0.5rem 0;
    font-weight: 500;
  }

  .bundle-product-price {
    font-size: 1rem;
    color: #000;
    margin-bottom: 1rem;
  }

  /* Variant selector */
  .variant-selector {
    margin-top: auto;
  }

  .variant-dropdown {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    margin-bottom: 0.75rem;
    appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,<svg width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L7 7L13 1" stroke="%23151515" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>');
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-color: #fff;
    font-size: 0.9rem;
  }

  .add-to-bundle-button {
    width: 100%;
    padding: 0.75rem;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .add-to-bundle-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Bundle counter */
  .bundle-counter {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: #000;
    color: #fff;
    padding: 1rem 2rem;
    border-radius: 4px;
    font-weight: 500;
    z-index: 1000;
  }

  .bundle-counter.complete {
    background: #4CAF50;
  }

  /* Bundle box styles */
  .bundle-box {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: #ffffff;
    padding: 1rem;
    box-shadow: 0 -4px 12px rgba(0,0,0,0.1);
    z-index: 1000;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .bundle-box.active {
    transform: translateY(0);
  }

  .bundle-box__content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .bundle-box__items {
    display: flex;
    gap: 1rem;
    overflow-x: auto;
    padding: 1rem;
  }

  .bundle-box__item {
    min-width: 100px;
    text-align: center;
  }

  .bundle-counter {
    background: #000;
    color: #fff;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: 500;
  }

  .add-to-bundle-button {
    width: 100%;
    padding: 0.75rem;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .add-to-bundle-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
{%- endstyle -%}

<!-- Add Toastify CDN in the head of your document -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('bundleBuilder', (bundleSize, discountPercentage) => ({
      bundleSize,
      discountPercentage,
      selectedItems: [],
      currentFilter: '',
      notification: {
        show: false,
        message: '',
        type: 'success'
      },
      loading: false,
      isViewOpen: false,

      init() {
        const savedBundle = localStorage.getItem('currentBundle');
        if (savedBundle) {
          this.selectedItems = JSON.parse(savedBundle);
        }
      },

      toggleView() {
        this.isViewOpen = !this.isViewOpen;
      },

      get originalTotal() {
        return this.selectedItems.reduce((sum, item) => sum + item.price, 0);
      },

      get finalPrice() {
        return this.originalTotal * (1 - this.discountPercentage / 100);
      },

      get savings() {
        return this.originalTotal - this.finalPrice;
      },

      filterProducts(type) {
        this.currentFilter = type;
      },

      shouldShowProduct(type) {
        return !this.currentFilter || this.currentFilter === type;
      },

      isProductSelected(productId) {
        return this.selectedItems.some(item => item.id === productId);
      },

      addToBundle(product) {
        if (this.selectedItems.length >= this.bundleSize) {
          this.showNotification('Bundle is full!', 'error');
          return;
        }

        if (this.isProductSelected(product.id)) {
          return;
        }

        this.selectedItems.push({
          id: product.id,
          variant_id: product.variant_id,
          title: product.title,
          price: product.price,
          variant_title: product.variant_title
        });

        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
        this.showNotification('Item added to bundle', 'success');
      },

      removeFromBundle(productId) {
        this.selectedItems = this.selectedItems.filter(item => item.id !== productId);
        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
        this.showNotification('Item removed from bundle', 'success');
      },

      async addBundleToCart() {
        if (this.selectedItems.length < this.bundleSize) {
          this.showNotification(`Please select ${this.bundleSize} items`, 'error');
          return;
        }

        this.loading = true;

        try {
          const bundleId = new Date().getTime();
          const items = this.selectedItems.map(item => ({
            id: parseInt(item.variant_id),
            quantity: 1,
            properties: {
              '_bundle_id': bundleId,
              '_bundle_discount': this.discountPercentage + '%',
              'Bundle': 'Jewelry Bundle Set',
              '_original_price': item.price
            }
          }));

          if (typeof window.liquidAjaxCart !== 'undefined') {
            const response = await window.liquidAjaxCart.add({
              items: items,
              sections: ['cart-drawer']
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }

            // Force a cart refresh
            await liquidAjaxcart.update();
          } else {
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ items })
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }
          }

          // Clear the bundle
          this.selectedItems = [];
          localStorage.removeItem('currentBundle');
          this.isViewOpen = false;

          // Show success message
          this.showNotification('Bundle added to cart!', 'success');

          // Wait a brief moment for the cart to update
          await this.updateCartDrawer();

          // Try multiple methods to open cart drawer
          document.dispatchEvent(new CustomEvent('theme:cart-drawer:show', {
            bubbles: true
          }));

          const cartDrawer = document.querySelector('.drawer--cart');
          if (cartDrawer) {
            cartDrawer.setAttribute('open', '');
            cartDrawer.classList.add('is-open');
          }

          const cartButton = document.querySelector('[data-cart-toggle]');
          if (cartButton) {
            cartButton.click();
          }

        } catch (error) {
          console.error('Bundle addition error:', error);
          this.showNotification(
            error.message || 'Error adding bundle to cart. Please try again.',
            'error'
          );
        } finally {
          this.loading = false;
        }
      },

      async updateCartDrawer() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          
          // Update cart count
          const cartCountElements = document.querySelectorAll('[data-cart-count]');
          cartCountElements.forEach(element => {
            element.textContent = cart.item_count;
            element.setAttribute('data-cart-count', cart.item_count);
          });

          // Update cart total
          const cartTotalElements = document.querySelectorAll('[data-cart-total]');
          cartTotalElements.forEach(element => {
            const formattedTotal = this.formatMoney(cart.total_price);
            element.textContent = formattedTotal;
            element.setAttribute('data-cart-total', cart.total_price);
          });

          // If there's a cart drawer items container, update its contents
          const cartDrawerItems = document.querySelector('[data-cart-drawer-items]');
          if (cartDrawerItems) {
            // Fetch the cart drawer section HTML
            const drawerResponse = await fetch('/?section_id=cart-drawer');
            const drawerHtml = await drawerResponse.text();
            
            // Create a temporary element to parse the HTML
            const parser = new DOMParser();
            const doc = parser.parseFromString(drawerHtml, 'text/html');
            
            // Find the items container in the parsed HTML
            const newItems = doc.querySelector('[data-cart-drawer-items]');
            if (newItems) {
              cartDrawerItems.innerHTML = newItems.innerHTML;
            }
          }
        } catch (error) {
          console.error('Error updating cart drawer:', error);
        }
      },

      showNotification(message, type = 'success') {
        // Clear any existing toasts first
        const existingToasts = document.querySelectorAll('.toastify');
        existingToasts.forEach(toast => toast.remove());

        // Show new toast
        Toastify({
          text: message,
          duration: 3000,
          gravity: "bottom",
          position: "left",
          className: type,
          style: {
            background: type === 'success' ? "#000000" : "#ef4444"
          },
          onClick: function(){} // Callback after click
        }).showToast();
      },

      formatMoney(cents) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(cents / 100);
      },

      updateSelectedVariant(event, productId) {
        // Additional variant handling if needed
      }
    }));
  });
</script>

<!-- Add event listener for cart drawer -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Prevent default cart form submission
    document.addEventListener('submit', (e) => {
      if (e.target.action && e.target.action.includes('/cart/add')) {
        e.preventDefault();
      }
    });
  });
</script>

<div class="bundle-builder" x-data="bundleBuilder({{ section.settings.bundle_size }}, {{ section.settings.discount_percentage }})" x-init="init()">
  <div class="bundle-builder__header">
    <h1 class="bundle-builder__title">Create Your Custom Bundle</h1>
    
    <!-- Filter buttons -->
    <div class="bundle-filter-controls">
      {% for product_type in collection.all_types %}
        <button class="bundle-filter-button"
                :class="{ 'active': currentFilter === '{{ product_type | handle }}' }"
                @click="filterProducts('{{ product_type | handle }}')">
          {{ product_type }}
        </button>
      {% endfor %}
    </div>
  </div>

  <div class="bundle-builder__products">
    {% for product in collections[section.settings.bundle_collection].products %}
      <div class="bundle-product-card"
           x-data="{ selectedVariant: '' }"
           :class="{ 'selected': isProductSelected('{{ product.id }}') }"
           data-product-type="{{ product.type | handle }}"
           x-show="shouldShowProduct('{{ product.type | handle }}')">
        
        <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}"
             alt="{{ product.title }}"
             class="bundle-product-image"
             loading="lazy">
        
        <h3 class="bundle-product-title">{{ product.title }}</h3>
        <p class="bundle-product-price">{{ product.price | money }}</p>
        
        <div class="variant-selector">
          <select class="variant-dropdown"
                  x-model="selectedVariant"
                  :disabled="isProductSelected('{{ product.id }}')"
                  @change="updateSelectedVariant($event, '{{ product.id }}')">
            <option value="">Select variant</option>
            {% for variant in product.variants %}
              <option value="{{ variant.id }}">{{ variant.title }}</option>
            {% endfor %}
          </select>

          <button class="add-to-bundle-button"
                  @click="addToBundle({
                    id: '{{ product.id }}',
                    variant_id: selectedVariant,
                    title: '{{ product.title | escape }}',
                    price: {{ product.price }},
                    variant_title: $el.querySelector('select').selectedOptions[0].text
                  })"
                  :disabled="!selectedVariant || isProductSelected('{{ product.id }}')"
                  x-show="!isProductSelected('{{ product.id }}')">
            Add to Bundle
          </button>
        </div>
      </div>
    {% endfor %}
  </div>

  <!-- Bundle Box -->
  <div class="bundle-box" 
       :class="{ 'active': selectedItems.length > 0 }"
       x-show="selectedItems.length > 0">
    <div class="bundle-box__content">
      <div class="bundle-box__items">
        <template x-for="item in selectedItems" :key="item.variant_id">
          <div class="bundle-box__item">
            <span x-text="item.title"></span>
            <button @click="removeFromBundle(item.id)" class="remove-item">×</button>
          </div>
        </template>
      </div>
      <div class="bundle-counter">
        <span x-text="`${selectedItems.length} / ${bundleSize} Items Added`"></span>
      </div>
    </div>
  </div>

  <!-- Bundle View Sidebar -->
  <div class="bundle-view"
       :class="{ 'active': isViewOpen }"
       x-show="isViewOpen"
       x-transition>
    
    <div class="bundle-view-header">
      <h3>Your Box</h3>
      <button class="close-button" @click="toggleView()">Close</button>
    </div>
    
    <!-- Empty state message -->
    <div class="bundle-view-empty" x-show="selectedItems.length === 0">
      <h4>Your bundle is empty</h4>
      <p>Select items to create your custom bundle and save {{ section.settings.discount_percentage }}% on your purchase.</p>
    </div>
    
    <!-- Selected items -->
    <template x-for="item in selectedItems" :key="item.variant_id">
      <div class="bundle-item">
        <h4 class="bundle-item-title" x-text="item.title"></h4>
        <span class="bundle-item-price" x-text="formatMoney(item.price)"></span>
        <button class="bundle-item-remove"
                @click="removeFromBundle(item.id)">
          Remove
        </button>
      </div>
    </template>
    
    <!-- Bundle totals -->
    <div class="bundle-total" x-show="selectedItems.length > 0">
      <p>
        <span>Original Total:</span>
        <span x-text="formatMoney(originalTotal)"></span>
      </p>
      <p>
        <span>Bundle Discount:</span>
        <span x-text="discountPercentage + '%'"></span>
      </p>
      <p>
        <span>You Save:</span>
        <span class="savings" x-text="formatMoney(savings)"></span>
      </p>
      <p class="final-price">
        <span>Final Price:</span>
        <span x-text="formatMoney(finalPrice)"></span>
      </p>
    </div>

    <!-- Bundle actions -->
    <div class="bundle-actions" x-show="selectedItems.length > 0">
      <button class="add-bundle-to-cart"
              @click="addBundleToCart()"
              :disabled="selectedItems.length < bundleSize || loading">
        <span x-show="!loading">Add Bundle to Cart</span>
        <span x-show="loading">Adding to Cart...</span>
      </button>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Bundle Builder",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Build Your Bundle"
    },
    {
      "type": "number",
      "id": "bundle_size",
      "label": "Number of Items in Bundle",
      "default": 7
    },
    {
      "type": "number",
      "id": "discount_percentage",
      "label": "Bundle Discount Percentage",
      "default": 20
    },
    {
      "type": "collection",
      "id": "bundle_collection",
      "label": "Bundle Products Collection"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Bundle Builder",
      "category": "Custom"
    }
  ]
}
{% endschema %} 