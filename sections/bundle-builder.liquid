

<!-- Initialize Liquid Ajax Cart -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof window.liquidAjaxCart === 'undefined') {
      console.warn('Liquid Ajax Cart not loaded, falling back to standard cart functionality');
    }
  });
</script>

{%- style -%}
  :root {
    --color-success: #4CAF50;  /* You can adjust this green color */
  }

  .bundle-builder {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .bundle-builder__header {
    text-align: center;
    margin-bottom: 2rem;
    position: relative;
  }

  .bundle-builder__content {
    display: grid;
    gap: 2rem;
  }

  @media screen and (max-width: 768px) {
    .bundle-builder__content {
      grid-template-columns: 1fr;
    }
  }

  .bundle-builder__products {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
    position: relative;
  }

  @media screen and (max-width: 768px) {
    .bundle-builder__products {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
  }

  @media screen and (min-width: 769px) and (max-width: 1024px) {
    .bundle-builder__products {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .bundle-builder__summary {
    background: var(--color-background);
    padding: 1.5rem;
    border-radius: 8px;
    position: sticky;
    top: 20px;
    border: 1px solid var(--color-border);
  }

  .bundle-product-card {
    background: #ffffff;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .bundle-product-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  }

  .bundle-product-card.selected {
    border: 2px solid var(--color-button);
    box-shadow: 0 0 0 2px var(--color-button-text);
  }

  .bundle-product-image-wrapper {
    position: relative;
    padding-top: 100%;
    background: #f8f8f8;
    overflow: hidden;
  }

  .bundle-product-image-wrapper img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .bundle-product-card:hover img {
    transform: scale(1.05);
  }

  .bundle-product-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: var(--color-button);
    color: var(--color-button-text);
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgb(0 0 0 / 0.1);
  }

  .bundle-product-content {
    padding: 1.5rem;
  }

  .bundle-product-title {
    font-size: 1rem;
    font-weight: 500;
    color: #1f2937;
    margin: 0 0 0.5rem;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .bundle-product-price {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin: 0 0 1rem;
  }

  .variant-dropdown {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 0.875rem;
    color: #374151;
    background: #f9fafb;
    margin-bottom: 1rem;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.25rem;
    padding-right: 2.5rem; /* Make room for the dropdown arrow */
  }

  /* Add max-width for desktop dropdown text */
  .variant-dropdown option {
    max-width: 18ch;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }



  .variant-dropdown:focus {
    outline: 2px solid var(--color-button);
    outline-offset: 2px;
  }

  .bundle-button-group {
    margin-top: 0.5rem;
  }

  .bundle-button {
    width: 100%;
    padding: 0.875rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: var(--color-button);
    color: var(--color-button-text);
    border: 1px solid transparent;
  }

  .bundle-button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  }

  .bundle-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .bundle-button-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .bundle-button--add-another {
    background: var(--color-button);
    color: var(--color-button-text);
  }

  .bundle-button--remove {
    background: transparent;
    border: 1px solid var(--color-button);
    color: var(--color-button);
  }

  .bundle-button--remove:hover:not(:disabled) {
    background: var(--color-button);
    color: var(--color-button-text);
  }

  .bundle-notifications {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
  }

  /* Add media query for mobile notifications */
  @media screen and (max-width: 768px) {
    .bundle-notifications {
      bottom: auto;
      top: 20px;
    }

    /* Adjust Toastify positioning for mobile */
    .toastify {
      left: 20px !important;
      right: 20px !important;
      top: 20px !important;
      bottom: auto !important;
      max-width: calc(100% - 40px) !important;
      transform: translateX(0) !important;
    }
  }

  /* Toastify custom styles */
  .toastify {
    padding: 12px 20px;
    color: #ffffff;
    display: inline-block;
    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12);
    background: #000000;
    position: fixed;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    max-width: calc(50% - 20px);
    z-index: 2147483647;
  }

  .toastify.on {
    opacity: 1;
  }

  .toast-close {
    opacity: 0.4;
    padding: 0 5px;
    margin-left: 10px;
  }

  .toastify.success {
    background: #000000;
  }

  .toastify.error {
    background: #ef4444;
  }

  .bundle-total {
    margin: 1.5rem 0;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  .bundle-savings {
    color: var(--color-success);
    font-weight: bold;
  }

  .add-bundle-to-cart {
    width: 100%;
    padding: 1rem;
    background: var(--color-button);
    color: var(--color-button-text);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.1em;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .add-bundle-to-cart:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .bundle-view {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 450px;
    height: 100vh;
    background: #ffffff;
    box-shadow: -5px 0 15px rgba(0,0,0,0.1);
    padding: 30px;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 10000;
    overflow-y: auto;
  }

  @media screen and (max-width: 768px) {
    .bundle-view {
      width: 100%;
      max-width: 100%;
    }
  }

  .bundle-view.active {
    transform: translateX(0);
  }

  .bundle-view-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e5e5e5;
  }

  .bundle-view-header h3 {
    font-size: 24px;
    font-weight: 500;
    margin: 0;
  }

  .close-button {
    background: transparent;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
    color: #333;
  }

  .bundle-item {
    padding: 20px 0;
    border-bottom: 1px solid #e5e5e5;
  }

  .bundle-item-content {
    display: flex;
    gap: 15px;
  }

  .bundle-item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
  }

  .bundle-item-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .bundle-item-title {
    font-size: 16px;
    color: #333;
    margin: 0;
  }

  .bundle-item-variant {
    font-size: 14px;
    color: #666;
  }

  .bundle-item-price {
    font-size: 14px;
    color: #666;
    margin-bottom: 4px;
  }

  .bundle-item-remove {
    background: transparent;
    border: none;
    color: #000000;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
    transition: opacity 0.3s ease;
    width: fit-content;
    text-decoration: underline;
  }

  .bundle-item-remove:hover {
    opacity: 0.7;
  }

  .bundle-total {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 2px solid #e5e5e5;
  }

  .bundle-total p {
    display: flex;
    justify-content: space-between;
    margin: 10px 0;
    font-size: 14px;
    color: #666;
  }

  .bundle-total .final-price {
    font-size: 18px;
    font-weight: bold;
    color: #333;
    margin-top: 15px;
  }

  .bundle-actions {
    position: sticky;
    bottom: 0;
    background: #ffffff;
    padding: 20px 0;
    margin-top: 30px;
  }

  .add-bundle-to-cart {
    width: 100%;
    padding: 15px;
    background: #000000;
    color: #ffffff;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .add-bundle-to-cart:hover {
    background: #333;
  }

  .add-bundle-to-cart:disabled {
    background: #cccccc;
    cursor: not-allowed;
  }

  .bundle-view-button {
    position: fixed;
    right: 20px;
    bottom: 20px;
    padding: 12px 24px;
    background: #000000;
    color: #ffffff;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    z-index: 999;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  @media screen and (max-width: 768px) {
    .bundle-view-button {
      right: 10px;
      bottom: 10px;
      padding: 10px 20px;
    }
  }

  .bundle-progress-container {
    margin: 30px auto;
    max-width: 400px;
    text-align: center;
    position: sticky;
    top: 0;
    z-index: 100;
    background: var(--color-background);
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  .bundle-progress-text {
    font-size: 16px;
    color: #666;
    margin-bottom: 15px;
  }

  .bundle-progress-bar {
    height: 8px;
    background: #e5e5e5;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .bundle-progress-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    transition: all 0.3s ease;
    border-radius: 4px;
  }

  .bundle-progress-steps {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
    position: relative;
    padding: 0 10px;
    display: none;
  }

  /* Add line connecting steps */
  .bundle-progress-steps::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 2px;
    background: #e5e5e5;
    transform: translateY(-50%);
    z-index: 1;
  }

  .bundle-progress-step {
    width: 24px;
    height: 24px;
    background: #e5e5e5;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    color: #ffffff;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
  }

  .bundle-progress-step.active {
    background: #000000;
  }

  .bundle-progress-step.active::after {
    content: '✓';
    font-size: 14px;
  }

  /* Add style for completed steps */
  .bundle-progress-step.completed {
    background: #000000;
  }

  .bundle-progress-step.completed::after {
    content: '✓';
    font-size: 14px;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }

  .bundle-progress-step.active {
    animation: pulse 2s infinite;
  }

  .bundle-progress-labels {
    display: flex;
    justify-content: space-between;
    margin-top: 25px;
    font-size: 14px;
    color: #666;
    display: none;
  }

  .bundle-progress-label {
    text-align: center;
    transition: color 0.3s ease;
  }

  .bundle-progress-label.active {
    color: #000000;
    font-weight: 500;
  }

  /* Empty state message */
  .bundle-view-empty {
    text-align: center;
    padding: 40px 20px;
    color: #666;
  }

  .bundle-view-empty h4 {
    font-size: 18px;
    margin-bottom: 10px;
    color: #333;
  }

  .bundle-view-empty p {
    font-size: 14px;
    line-height: 1.5;
  }

  /* Selected product card styling */
  .bundle-product-card.selected {
    border: 2px solid #000000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transform: translateY(-2px);
  }

  .bundle-product-card.selected .bundle-button {
    background: #000000;
    color: #ffffff;
    border-radius: 4px;
    padding: 10px 20px;
    border: 1px solid #000000;
    transition: all 0.3s ease;
  }

  .bundle-product-card.selected .bundle-button:hover {
    background: #ffffff;
    color: #000000;
  }

  .bundle-type-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin: 2rem 0;
    justify-content: center;
  }

  .type-filter-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background: var(--color-background);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    font-weight: normal;
  }

  .type-filter-button:hover {
    background: var(--color-background-secondary);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .type-filter-button.active {
    background: var(--color-button);
    color: var(--color-button-text);
    border-color: var(--color-button);
    font-weight: bold;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .type-filter-button.active::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 4px;
    height: 4px;
    background: var(--color-button);
    border-radius: 50%;
  }

  /* Add active indicator styles */
  .active-indicator {
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background: var(--color-button);
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  /* Optional: Add animation for the active indicator */
  @keyframes indicatorPop {
    0% { transform: translateX(-50%) scale(0); }
    50% { transform: translateX(-50%) scale(1.2); }
    100% { transform: translateX(-50%) scale(1); }
  }

  .active-indicator {
    animation: indicatorPop 0.3s ease forwards;
  }

  /* Mobile Styles */
  @media screen and (max-width: 768px) {
    .bundle-builder__products {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      padding: 0 0.5rem;
    }

    .bundle-product-card {
      padding: 0;
      border-radius: 10px;
    }

    h3.bundle-product-title {
      font-size: 12px;
      margin: 0.5rem 0;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .bundle-product-content {
      padding: 0.75rem;
    }

    .bundle-product-price {
      font-size: 0.875rem;
      margin: 0.25rem 0 0.5rem;
    }

    .variant-dropdown {
      padding: 0.5rem;
      font-size: 0.75rem;
      margin-bottom: 0.5rem;
      background-position: right 0.5rem center;
      background-size: 0.875rem;
    }

    .bundle-button {
      padding: 8px 12px;
      font-size: 0.75rem;
      letter-spacing: 0.01em;
    }

    .bundle-button-row {
      gap: 6px;
    }

    .bundle-button--add-another,
    .bundle-button--remove {
      padding: 8px;
      font-size: 0.7rem;
      min-height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Adjust image wrapper for mobile */
    .bundle-product-image-wrapper {
      padding-top: 100%;
    }

    /* Adjust badge size for mobile */
    .bundle-product-badge {
      width: 20px;
      height: 20px;
      top: 8px;
      right: 8px;
    }

    .bundle-product-badge svg {
      width: 16px;
      height: 16px;
    }

    /* Add some breathing room between sections */
    .bundle-builder {
      padding: 1rem;
    }

    /* Improve type filter buttons on mobile */
    .bundle-type-filter {
      gap: 0.5rem;
      margin: 1rem 0;
      padding: 0 0.5rem;
    }

    .type-filter-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.85rem;
    }

    /* Make the scrolling smooth for the filter buttons */
    .bundle-type-filter {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none; /* Firefox */
      -ms-overflow-style: none; /* IE and Edge */
      padding-bottom: 0.5rem;
    }

    .bundle-type-filter::-webkit-scrollbar {
      display: none; /* Chrome, Safari, Opera */
    }
  }

  /* Add smooth loading transition */
  .bundle-product-card {
    opacity: 0;
    animation: fadeIn 0.3s ease forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Add loading state styles */
  .bundle-product-card.loading {
    position: relative;
    overflow: hidden;
  }

  .bundle-product-card.loading::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255,255,255,0) 0%,
      rgba(255,255,255,0.5) 50%,
      rgba(255,255,255,0) 100%
    );
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  .bundle-item-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 8px 0;
  }

  .bundle-button-group {
    margin-top: 0.5rem;
  }

  .bundle-button-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .bundle-button--add-another {
    background: var(--color-button);
  }

  .bundle-button--remove {
    background: transparent;
    border: 1px solid var(--color-button);
    color: var(--color-button);
  }

  .bundle-button--remove:hover {
    background: var(--color-button);
    color: var(--color-button-text);
  }

  /* Mobile Styles */
  @media screen and (max-width: 768px) {
    .bundle-button-group {
      margin-top: 0.25rem;
    }

    .bundle-button {
      padding: 6px 8px;
      font-size: 0.65rem;
      letter-spacing: 0;
      border-radius: 4px;
      min-height: 28px;
    }

    .bundle-button-row {
      gap: 4px;
    }

    .bundle-button--add-another,
    .bundle-button--remove {
      padding: 6px 8px;
      font-size: 0.65rem;
      min-height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
    }

    .bundle-product-content {
      padding: 0.5rem;
    }

    .variant-dropdown {
      padding: 4px 8px;
      font-size: 0.7rem;
      margin-bottom: 0.25rem;
      border-radius: 4px;
    }
  }

  /* Extra Small Mobile Styles */
  @media screen and (max-width: 465px) {
    .bundle-button-group {
      margin-top: 0.2rem;
    }

    .bundle-button {
      padding: 4px 6px;
      font-size: 0.6rem;
      min-height: 24px;
    }

    .bundle-button-row {
      gap: 3px;
    }

    .bundle-button--add-another,
    .bundle-button--remove {
      padding: 5px 10px !important;
      font-size: 10px;
      min-height: 24px;
    }

    .bundle-product-content {
      padding: 0.4rem;
    }

    .variant-dropdown {
      padding: 3px 6px;
      font-size: 0.65rem;
      margin-bottom: 0.2rem;
    }
  }

  @supports (position: sticky) {
    .bundle-progress-container {
      position: -webkit-sticky;
      position: sticky;
    }
  }

  @media screen and (max-width: 768px) {
    .bundle-progress-container {
      position: -webkit-sticky;
      position: sticky;
      top: 0;
      margin: 15px auto;
    }
  }
{%- endstyle -%}

<!-- Add Toastify CDN in the head of your document -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('bundleBuilder', (bundleSize, discountPercentage) => ({
      bundleSize: bundleSize,
      discountPercentage: discountPercentage,
      selectedItems: [],
      selectedType: 'all',
      notification: {
        show: false,
        message: '',
        type: 'success'
      },
      loading: false,
      isViewOpen: false,

      init() {
        // Clear localStorage on page load
        localStorage.removeItem('currentBundle');
        this.selectedItems = [];
        this.selectedType = 'all';
      },

      toggleView() {
        this.isViewOpen = !this.isViewOpen;
      },

      get originalTotal() {
        return this.selectedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      },

      get finalPrice() {
        return this.originalTotal * (1 - this.discountPercentage / 100);
      },

      get savings() {
        return this.originalTotal - this.finalPrice;
      },

      isProductSelected(productId) {
        return this.selectedItems.some(item => item.id === productId);
      },

      addToBundle(product) {
        if (this.selectedItems.length >= this.bundleSize) {
          this.showNotification('Bundle is full!', 'error');
          return;
        }

        // Add unique instance ID to distinguish multiple instances of same product
        const bundleItem = {
          ...product,
          instanceId: `${product.id}_${Date.now()}`, // Unique identifier for this instance
          quantity: 1
        };

        this.selectedItems.push(bundleItem);
        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
        this.showNotification('Item added to bundle', 'success');
      },

      removeFromBundle(productId) {
        // Find the last instance of this product in the array
        const lastIndex = [...this.selectedItems].reverse()
          .findIndex(item => item.id === productId);
        
        if (lastIndex !== -1) {
          // Convert the reverse index to the actual index
          const actualIndex = this.selectedItems.length - 1 - lastIndex;
          // Remove the item at the actual index
          this.selectedItems.splice(actualIndex, 1);
          localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
          this.showNotification('Item removed from bundle', 'success');
        }
      },

      updateQuantity(instanceId, change) {
        const item = this.selectedItems.find(item => item.instanceId === instanceId);
        if (!item) return;

        const newQuantity = item.quantity + change;
        if (newQuantity < 1) return;

        // Calculate how many slots this change would use
        const currentTotalItems = this.selectedItems.reduce((sum, i) => sum + i.quantity, 0);
        if (currentTotalItems + change > this.bundleSize) {
          this.showNotification(`Cannot exceed bundle size of ${this.bundleSize}`, 'error');
          return;
        }

        item.quantity = newQuantity;
        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
      },

      async addBundleToCart() {
        if (this.selectedItems.length < this.bundleSize) {
          this.showNotification(`Please select ${this.bundleSize} items`, 'error');
          return;
        }

        this.loading = true;

        try {
          const bundleId = new Date().getTime();
          const items = this.selectedItems.map(item => ({
            id: parseInt(item.variant_id),
            quantity: item.quantity,
            properties: {
              '_bundle_id': bundleId,
              '_bundle_discount': this.discountPercentage + '%',
              'Bundle': 'Jewelry Bundle Set',
              '_original_price': item.price
            }
          }));

          if (typeof window.liquidAjaxCart !== 'undefined') {
            const response = await window.liquidAjaxCart.add({
              items: items
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }
          } else {
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ items })
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }
          }

          // Clear the bundle
          this.selectedItems = [];
          localStorage.removeItem('currentBundle');
          this.isViewOpen = false;

          // Show success message
          this.showNotification('Bundle added to cart!', 'success');

          // Redirect to cart page
          window.location.href = '/cart';

        } catch (error) {
          console.error('Bundle addition error:', error);
          this.showNotification(
            error.message || 'Error adding bundle to cart. Please try again.',
            'error'
          );
        } finally {
          this.loading = false;
        }
      },

      showNotification(message, type = 'success') {
        // Clear any existing toasts first
        const existingToasts = document.querySelectorAll('.toastify');
        existingToasts.forEach(toast => toast.remove());

        // Show new toast
        Toastify({
          text: message,
          duration: 3000,
          gravity: window.innerWidth <= 768 ? "top" : "bottom", // Change gravity based on screen size
          position: "left",
          className: type,
          style: {
            background: type === 'success' ? "#000000" : "#ef4444"
          },
          onClick: function(){} // Callback after click
        }).showToast();
      },

      formatMoney(cents) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(cents / 100);
      }
    }));
  });
</script>

<!-- Add event listener for cart drawer -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Prevent default cart form submission
    document.addEventListener('submit', (e) => {
      if (e.target.action && e.target.action.includes('/cart/add')) {
        e.preventDefault();
      }
    });
  });
</script>

<div class="bundle-builder" 
     x-data="bundleBuilder({{ section.settings.bundle_size }}, {{ section.settings.discount_percentage }})"
     x-init="init()">
  
  <div class="bundle-builder__header">
    <h2 class="h1">{{ section.settings.title }}</h2>
    
    <div class="bundle-progress-container">
      <div class="bundle-progress-text">
        <span x-text="selectedItems.length"></span> / <span x-text="bundleSize"></span> items selected
      </div>
      
      <div class="bundle-progress-bar">
        <div class="bundle-progress-fill"
             :style="{
               width: (selectedItems.length / bundleSize * 100) + '%',
               background: selectedItems.length === bundleSize ? 'var(--color-success, #4CAF50)' : 'linear-gradient(90deg, #000000, #333333)'
             }">
        </div>
      </div>
      
      <div class="bundle-progress-steps">
        <template x-for="index in bundleSize" :key="index">
          <div class="bundle-progress-step"
               :class="{
                 'active': selectedItems.length === index,
                 'completed': selectedItems.length > index
               }">
          </div>
        </template>
      </div>
      
      <div class="bundle-progress-labels">
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length === 0 }">
          Start
        </div>
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length > 0 && selectedItems.length < bundleSize }">
          Building
        </div>
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length === bundleSize }">
          Complete
        </div>
      </div>
    </div>
  </div>

  <!-- Add type filter buttons after the header -->
  <div class="bundle-type-filter">
    <button class="type-filter-button" 
            @click="selectedType = 'all'"
            :class="{ 'active': selectedType === 'all' }">
      All Products
      <span class="active-indicator" x-show="selectedType === 'all'"></span>
    </button>
    {% assign product_types = collections[section.settings.bundle_collection].products | map: 'type' | uniq %}
    {% for type in product_types %}
      {% unless type == blank or type == 'top page' or type == 'HIDDEN' %}
        <button class="type-filter-button"
                @click="selectedType = '{{ type | escape }}'"
                :class="{ 'active': selectedType === '{{ type | escape }}' }">
          {{ type }}
          <span class="active-indicator" x-show="selectedType === '{{ type | escape }}'"></span>
        </button>
      {% endunless %}
    {% endfor %}
  </div>

  <div class="bundle-builder__content">
    <!-- Product Grid -->
    <div class="bundle-builder__products">
      {% for product in collections[section.settings.bundle_collection].products %}
        <div class="bundle-product-card" 
             x-data="{ 
               showVariants: false,
               selectedVariant: {
                 id: '{{ product.first_available_variant.id }}',
                 price: {{ product.first_available_variant.price }},
                 title: '{{ product.first_available_variant.title | split: ' / ' | first | escape }}'
               },
               variantImage: '{{ product.featured_image | img_url: '300x300', crop: 'center' }}'
             }"
             x-show="selectedType === 'all' || selectedType === '{{ product.type | escape }}'"
             :class="{ 'selected': isProductSelected('{{ product.id }}') }">
          
          <div class="bundle-product-image-wrapper">
            <img :src="variantImage" 
                 alt="{{ product.title }}"
                 loading="lazy"
                 width="300"
                 height="300">
            <div class="bundle-product-badge" x-show="isProductSelected('{{ product.id }}')">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
              </svg>
            </div>
          </div>
          
          <div class="bundle-product-content">
            <h3 class="bundle-product-title">{{ product.title }}</h3>
            <p class="bundle-product-price" x-text="formatMoney(selectedVariant.price)"></p>
            
            <select class="variant-dropdown"
                    :value="selectedVariant.id"
                    @change="
                      const variant = $event.target.selectedOptions[0].dataset;
                      selectedVariant = {
                        id: variant.id,
                        price: parseFloat(variant.price),
                        title: variant.title
                      };
                      variantImage = variant.image;
                    ">
              {% for variant in product.variants %}
                {% assign option_text = variant.title | split: ' / ' | first %}
                <option value="{{ variant.id }}"
                        data-id="{{ variant.id }}"
                        data-price="{{ variant.price }}"
                        data-title="{{ option_text }}"
                        data-image="{{ variant.featured_image | default: product.featured_image | img_url: '300x300', crop: 'center' }}">
                  {{ option_text }}
                </option>
              {% endfor %}
            </select>
            
            <div class="bundle-button-group">
              <button class="bundle-button"
                      x-show="!isProductSelected('{{ product.id }}')"
                      @click="addToBundle({
                        id: '{{ product.id }}',
                        variant_id: selectedVariant.id,
                        title: '{{ product.title | escape }}',
                        price: selectedVariant.price,
                        variant_title: selectedVariant.title,
                        image: variantImage
                      })"
                      :disabled="selectedItems.length >= bundleSize">
                <span x-text="selectedItems.length >= bundleSize ? 'Box is Full' : 'Add to Bundle'"></span>
              </button>
              
              <template x-if="isProductSelected('{{ product.id }}')">
                <div class="bundle-button-row">
                  <button class="bundle-button bundle-button--add-another"
                          @click="addToBundle({
                            id: '{{ product.id }}',
                            variant_id: selectedVariant.id,
                            title: '{{ product.title | escape }}',
                            price: selectedVariant.price,
                            variant_title: selectedVariant.title,
                            image: variantImage
                          })"
                          :disabled="selectedItems.length >= bundleSize">
                    <span x-text="selectedItems.length >= bundleSize ? 'Box is Full' : 'Add Another'"></span>
                  </button>
                  <button class="bundle-button bundle-button--remove"
                          @click="removeFromBundle('{{ product.id }}')">
                    Remove
                  </button>
                </div>
              </template>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- View Box Button -->
  <button class="bundle-view-button"
          @click="toggleView()"
          x-show="!isViewOpen">
    View Box (<span x-text="selectedItems.length"></span>)
  </button>

  <!-- Bundle View Sidebar -->
  <div class="bundle-view"
       :class="{ 'active': isViewOpen }"
       x-show="isViewOpen"
       x-transition
       @click.outside="if (!$event.target.closest('.bundle-product-card')) isViewOpen = false">
    
    <div class="bundle-view-header">
      <h3>Your Box</h3>
      <button class="close-button" @click="toggleView()">Close</button>
    </div>
    
    <!-- Empty state message -->
    <div class="bundle-view-empty" x-show="selectedItems.length === 0">
      <h4>Your bundle is empty</h4>
      <p>Select items to create your custom bundle and save {{ section.settings.discount_percentage }}% on your purchase.</p>
    </div>
    
    <!-- Selected items -->
    <template x-for="item in selectedItems" :key="item.instanceId">
      <div class="bundle-item">
        <div class="bundle-item-content">
          <img class="bundle-item-image" :src="item.image" :alt="item.title">
          <div class="bundle-item-info">
            <h4 class="bundle-item-title" x-text="item.title"></h4>
            <span class="bundle-item-variant" x-text="item.variant_title"></span>
            <span class="bundle-item-price" x-text="formatMoney(item.price)"></span>
            <button class="bundle-item-remove"
                    @click="removeFromBundle(item.id)">
              Remove
            </button>
          </div>
        </div>
      </div>
    </template>
    
    <!-- Bundle totals -->
    <div class="bundle-total" x-show="selectedItems.length > 0">
      <p>
        <span>Original Total:</span>
        <span x-text="formatMoney(originalTotal)"></span>
      </p>
      <p>
        <span>Bundle Discount:</span>
        <span x-text="discountPercentage + '%'"></span>
      </p>
      <p>
        <span>You Save:</span>
        <span class="savings" x-text="formatMoney(savings)"></span>
      </p>
      <p class="final-price">
        <span>Final Price:</span>
        <span x-text="formatMoney(finalPrice)"></span>
      </p>
    </div>

    <!-- Bundle actions -->
    <div class="bundle-actions" x-show="selectedItems.length > 0">
      <button class="add-bundle-to-cart"
              @click="addBundleToCart()"
              :disabled="selectedItems.length < bundleSize || loading">
        <span x-show="!loading">Add Bundle to Cart</span>
        <span x-show="loading">Adding to Cart...</span>
      </button>
    </div>
  </div>
</div>

<script>
  function truncateVariantOptions() {
    const isMobile = window.innerWidth <= 768;
    const maxLength = isMobile ? 15 : 22;
    
    document.querySelectorAll('.variant-dropdown').forEach(dropdown => {
      Array.from(dropdown.options).forEach(option => {
        const originalText = option.getAttribute('data-original-text') || option.text;
        if (!option.getAttribute('data-original-text')) {
          option.setAttribute('data-original-text', originalText);
        }
        
        option.text = originalText.length > maxLength 
          ? originalText.substring(0, maxLength) + '...' 
          : originalText;
      });
    });
  }

  // Run on page load
  document.addEventListener('DOMContentLoaded', truncateVariantOptions);
  
  // Run on window resize
  let resizeTimer;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(truncateVariantOptions, 250);
  });
</script>

{% schema %}
{
  "name": "Bundle Builder",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Build Your Bundle"
    },
    {
      "type": "number",
      "id": "bundle_size",
      "label": "Number of Items in Bundle",
      "default": 7
    },
    {
      "type": "number",
      "id": "discount_percentage",
      "label": "Bundle Discount Percentage",
      "default": 20
    },
    {
      "type": "collection",
      "id": "bundle_collection",
      "label": "Bundle Products Collection"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Bundle Builder",
      "category": "Custom"
    }
  ]
}
{% endschema %} 