<!-- Add Liquid Ajax Cart -->
<script src="https://cdn.jsdelivr.net/npm/liquid-ajax-cart@2.3.0/liquid-ajax-cart.js" defer="defer"></script>
<link href="https://cdn.jsdelivr.net/npm/liquid-ajax-cart@2.3.0/liquid-ajax-cart.css" rel="stylesheet">

<!-- Initialize Liquid Ajax Cart -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof window.liquidAjaxCart === 'undefined') {
      console.warn('Liquid Ajax Cart not loaded, falling back to standard cart functionality');
    }
  });
</script>

{%- style -%}
  .bundle-builder {
    @apply max-w-7xl mx-auto px-4 py-8;
  }

  .bundle-progress {
    @apply fixed top-0 left-0 right-0 bg-white/90 backdrop-blur-sm shadow-md z-50 p-4;
  }

  .bundle-progress__inner {
    @apply max-w-7xl mx-auto flex items-center justify-between gap-4;
  }

  .bundle-progress__bar {
    @apply h-2 bg-gray-100 rounded-full overflow-hidden;
  }

  .bundle-progress__fill {
    @apply h-full transition-all duration-300 bg-black;
  }

  .bundle-grid {
    @apply grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6;
  }

  .bundle-product {
    @apply relative flex flex-col bg-white rounded-lg shadow-sm overflow-hidden transition-all duration-300;
  }

  .bundle-product.selected {
    @apply ring-2 ring-black shadow-lg scale-[1.02];
  }

  .bundle-product__image {
    @apply aspect-square w-full object-cover;
  }

  .bundle-product__content {
    @apply p-4 flex flex-col flex-1;
  }

  .bundle-variant-selector {
    @apply mt-2 space-y-2;
  }

  .bundle-select {
    @apply w-full text-sm border-gray-300 rounded-md shadow-sm focus:border-black focus:ring-black;
  }

  .bundle-button {
    @apply mt-auto w-full px-4 py-2 text-sm font-medium text-white bg-black rounded-md 
           hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black
           disabled:opacity-50 disabled:cursor-not-allowed;
  }

  .bundle-view {
    @apply fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50;
  }

  .bundle-view__content {
    @apply bg-white rounded-lg w-full max-w-lg max-h-[90vh] overflow-y-auto p-6;
  }

  .bundle-item {
    @apply flex items-center gap-4 p-4 bg-gray-50 rounded-lg mb-4;
  }

  .bundle-builder__header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .bundle-builder__content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }

  @media screen and (max-width: 768px) {
    .bundle-builder__content {
      grid-template-columns: 1fr;
    }
  }

  .bundle-builder__products {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
    position: relative;
  }

  .bundle-builder__summary {
    background: var(--color-background);
    padding: 1.5rem;
    border-radius: 8px;
    position: sticky;
    top: 20px;
    border: 1px solid var(--color-border);
  }

  .bundle-product-card {
    border: 1px solid #e5e5e5;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    transition: all 0.3s ease;
    background: #ffffff;
    height: 100%;
    display: flex;
    flex-direction: column;
    position: relative;
    z-index: 1;
  }

  .bundle-product-card.selected {
    border: 2px solid #000000;
    z-index: 1;
  }

  .bundle-product-card img {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .bundle-product-card-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .bundle-product-title {
    margin: 0.5rem 0;
    font-size: 1rem;
    line-height: 1.4;
  }

  .bundle-product-price {
    margin: 0.5rem 0;
  }

  .bundle-notifications {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
  }

  /* Toastify custom styles */
  .toastify {
    padding: 12px 20px;
    color: #ffffff;
    display: inline-block;
    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12);
    background: #000000;
    position: fixed;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    max-width: calc(50% - 20px);
    z-index: 2147483647;
  }

  .toastify.on {
    opacity: 1;
  }

  .toast-close {
    opacity: 0.4;
    padding: 0 5px;
    margin-left: 10px;
  }

  .toastify.success {
    background: #000000;
  }

  .toastify.error {
    background: #ef4444;
  }

  .bundle-total {
    margin: 1.5rem 0;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  .bundle-savings {
    color: var(--color-success);
    font-weight: bold;
  }

  .add-bundle-to-cart {
    width: 100%;
    padding: 1rem;
    background: var(--color-button);
    color: var(--color-button-text);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.1em;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .add-bundle-to-cart:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .bundle-view-button {
    position: fixed;
    right: 20px;
    bottom: 20px;
    padding: 12px 24px;
    background: #000000;
    color: #ffffff;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    z-index: 999;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  @media screen and (max-width: 768px) {
    .bundle-view-button {
      right: 10px;
      bottom: 10px;
      padding: 10px 20px;
    }
  }

  .bundle-progress-container {
    margin: 30px auto;
    max-width: 400px;
    text-align: center;
  }

  .bundle-progress-text {
    font-size: 16px;
    color: #666;
    margin-bottom: 15px;
  }

  .bundle-progress-bar {
    height: 8px;
    background: #e5e5e5;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .bundle-progress-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: linear-gradient(90deg, #000000, #333333);
    transition: width 0.3s ease;
    border-radius: 4px;
  }

  .bundle-progress-steps {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
    position: relative;
    padding: 0 10px;
  }

  /* Add line connecting steps */
  .bundle-progress-steps::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 2px;
    background: #e5e5e5;
    transform: translateY(-50%);
    z-index: 1;
  }

  .bundle-progress-step {
    width: 24px;
    height: 24px;
    background: #e5e5e5;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    color: #ffffff;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
  }

  .bundle-progress-step.active {
    background: #000000;
  }

  .bundle-progress-step.active::after {
    content: '✓';
    font-size: 14px;
  }

  /* Add style for completed steps */
  .bundle-progress-step.completed {
    background: #000000;
  }

  .bundle-progress-step.completed::after {
    content: '✓';
    font-size: 14px;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }

  .bundle-progress-step.active {
    animation: pulse 2s infinite;
  }

  .bundle-progress-labels {
    display: flex;
    justify-content: space-between;
    margin-top: 25px;
    font-size: 14px;
    color: #666;
  }

  .bundle-progress-label {
    text-align: center;
    transition: color 0.3s ease;
  }

  .bundle-progress-label.active {
    color: #000000;
    font-weight: 500;
  }

  /* Empty state message */
  .bundle-view-empty {
    text-align: center;
    padding: 40px 20px;
    color: #666;
  }

  .bundle-view-empty h4 {
    font-size: 18px;
    margin-bottom: 10px;
    color: #333;
  }

  .bundle-view-empty p {
    font-size: 14px;
    line-height: 1.5;
  }

  /* Selected product card styling */
  .bundle-product-card.selected {
    border: 2px solid #000000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transform: translateY(-2px);
  }

  .bundle-product-card.selected .bundle-button {
    background: #000000;
    color: #ffffff;
    border-radius: 4px;
    padding: 10px 20px;
    border: 1px solid #000000;
    transition: all 0.3s ease;
  }

  .bundle-product-card.selected .bundle-button:hover {
    background: #ffffff;
    color: #000000;
  }
{%- endstyle -%}

<!-- Add Toastify CDN in the head of your document -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('bundleBuilder', (bundleSize, discountPercentage) => ({
      bundleSize: bundleSize,
      discountPercentage: discountPercentage,
      selectedItems: [],
      notification: {
        show: false,
        message: '',
        type: 'success'
      },
      loading: false,
      isViewOpen: false,
      activeCategory: 'All',
      selectedVariants: {},

      init() {
        this.initializeSelectedVariants();
        // Initialize from localStorage if exists
        const savedBundle = localStorage.getItem('currentBundle');
        if (savedBundle) {
          this.selectedItems = JSON.parse(savedBundle);
        }
      },

      initializeSelectedVariants() {
        // ... variant initialization logic ...
      },

      toggleView() {
        this.isViewOpen = !this.isViewOpen;
      },

      get originalTotal() {
        return this.selectedItems.reduce((sum, item) => sum + item.price, 0);
      },

      get finalPrice() {
        return this.originalTotal * (1 - this.discountPercentage / 100);
      },

      get savings() {
        return this.originalTotal - this.finalPrice;
      },

      isProductSelected(productId) {
        return this.selectedItems.some(item => item.id === productId);
      },

      addToBundle(product) {
        if (this.selectedItems.length >= this.bundleSize) {
          this.showNotification('Bundle is full!', 'error');
          return;
        }

        this.selectedItems.push(product);
        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
        this.showNotification('Item added to bundle', 'success');
      },

      removeFromBundle(productId) {
        this.selectedItems = this.selectedItems.filter(item => item.id !== productId);
        localStorage.setItem('currentBundle', JSON.stringify(this.selectedItems));
        this.showNotification('Item removed from bundle', 'success');
      },

      async addBundleToCart() {
        if (this.selectedItems.length < this.bundleSize) {
          this.showNotification(`Please select ${this.bundleSize} items`, 'error');
          return;
        }

        this.loading = true;

        try {
          const bundleId = new Date().getTime();
          const items = this.selectedItems.map(item => ({
            id: parseInt(item.variant_id),
            quantity: 1,
            properties: {
              '_bundle_id': bundleId,
              '_bundle_discount': this.discountPercentage + '%',
              'Bundle': 'Jewelry Bundle Set',
              '_original_price': item.price
            }
          }));

          if (typeof window.liquidAjaxCart !== 'undefined') {
            const response = await window.liquidAjaxCart.add({
              items: items,
              sections: ['cart-drawer']
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }

            // Force a cart refresh
            await liquidAjaxcart.update();
          } else {
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ items })
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.description || 'Failed to add bundle to cart');
            }
          }

          // Clear the bundle
          this.selectedItems = [];
          localStorage.removeItem('currentBundle');
          this.isViewOpen = false;

          // Show success message
          this.showNotification('Bundle added to cart!', 'success');

          // Wait a brief moment for the cart to update
          await new Promise(resolve => setTimeout(resolve, 100));

          // Update cart drawer with latest information
          await this.updateCartDrawer();

          // Try multiple methods to open cart drawer
          document.dispatchEvent(new CustomEvent('theme:cart-drawer:show', {
            bubbles: true
          }));

          const cartDrawer = document.querySelector('.drawer--cart');
          if (cartDrawer) {
            cartDrawer.setAttribute('open', '');
            cartDrawer.classList.add('is-open');
          }

          const cartButton = document.querySelector('[data-cart-toggle]');
          if (cartButton) {
            cartButton.click();
          }

        } catch (error) {
          console.error('Bundle addition error:', error);
          this.showNotification(
            error.message || 'Error adding bundle to cart. Please try again.',
            'error'
          );
        } finally {
          this.loading = false;
        }
      },

      async updateCartDrawer() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          
          // Update cart count
          const cartCountElements = document.querySelectorAll('[data-cart-count]');
          cartCountElements.forEach(element => {
            element.textContent = cart.item_count;
            element.setAttribute('data-cart-count', cart.item_count);
          });

          // Update cart total
          const cartTotalElements = document.querySelectorAll('[data-cart-total]');
          cartTotalElements.forEach(element => {
            const formattedTotal = this.formatMoney(cart.total_price);
            element.textContent = formattedTotal;
            element.setAttribute('data-cart-total', cart.total_price);
          });

          // If there's a cart drawer items container, update its contents
          const cartDrawerItems = document.querySelector('[data-cart-drawer-items]');
          if (cartDrawerItems) {
            // Fetch the cart drawer section HTML
            const drawerResponse = await fetch('/?section_id=cart-drawer');
            const drawerHtml = await drawerResponse.text();
            
            // Create a temporary element to parse the HTML
            const parser = new DOMParser();
            const doc = parser.parseFromString(drawerHtml, 'text/html');
            
            // Find the items container in the parsed HTML
            const newItems = doc.querySelector('[data-cart-drawer-items]');
            if (newItems) {
              cartDrawerItems.innerHTML = newItems.innerHTML;
            }
          }
        } catch (error) {
          console.error('Error updating cart drawer:', error);
        }
      },

      showNotification(message, type = 'success') {
        // Clear any existing toasts first
        const existingToasts = document.querySelectorAll('.toastify');
        existingToasts.forEach(toast => toast.remove());

        // Show new toast
        Toastify({
          text: message,
          duration: 3000,
          gravity: "bottom",
          position: "left",
          className: type,
          style: {
            background: type === 'success' ? "#000000" : "#ef4444"
          },
          onClick: function(){} // Callback after click
        }).showToast();
      },

      formatMoney(cents) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(cents / 100);
      },

      get filteredProducts() {
        return this.activeCategory === 'All'
          ? this.products
          : this.products.filter(p => p.product_type === this.activeCategory);
      }
    }));
  });
</script>

<!-- Add event listener for cart drawer -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Prevent default cart form submission
    document.addEventListener('submit', (e) => {
      if (e.target.action && e.target.action.includes('/cart/add')) {
        e.preventDefault();
      }
    });
  });
</script>

<div class="bundle-builder" 
     x-data="bundleBuilder({{ section.settings.bundle_size }}, {{ section.settings.discount_percentage }})"
     x-init="init()">
  
  <div class="bundle-builder__header">
    <h2 class="h1">{{ section.settings.title }}</h2>
    
    <div class="bundle-progress">
      <div class="bundle-progress__inner">
        <div class="bundle-progress__bar">
          <div class="bundle-progress__fill"
               :style="'width: ' + (selectedItems.length / bundleSize * 100) + '%'">
          </div>
        </div>
      </div>
      
      <div class="bundle-progress-steps">
        <template x-for="index in bundleSize" :key="index">
          <div class="bundle-progress-step"
               :class="{
                 'active': selectedItems.length === index,
                 'completed': selectedItems.length > index
               }">
          </div>
        </template>
      </div>
      
      <div class="bundle-progress-labels">
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length === 0 }">
          Start
        </div>
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length > 0 && selectedItems.length < bundleSize }">
          Building
        </div>
        <div class="bundle-progress-label"
             :class="{ 'active': selectedItems.length === bundleSize }">
          Complete
        </div>
      </div>
    </div>
  </div>

  <div class="bundle-builder__content">
    <!-- Category Tabs -->
    <div class="bundle-categories">
      <!-- ... category tabs markup ... -->
    </div>

    <!-- Product Grid -->
    <div class="bundle-grid">
      {% for product in collections[section.settings.bundle_collection].products %}
        <div class="bundle-product" 
             x-data="{ showVariants: false }"
             :class="{ 'selected': isProductSelected('{{ product.id }}') }">
          
          <img src="{{ product.featured_image | img_url: '300x300', crop: 'center' }}" 
               alt="{{ product.title }}"
               loading="lazy"
               width="300"
               height="300"
               class="bundle-product__image">
          
          <div class="bundle-product__content">
            <h3 class="h4">{{ product.title }}</h3>
            <p class="price" x-text="formatMoney({{ product.price }})"></p>
            
            <button class="bundle-button"
                    x-show="!isProductSelected('{{ product.id }}')"
                    @click="showVariants = true"
                    :disabled="selectedItems.length >= bundleSize">
              Add to Bundle
            </button>
            
            <button class="bundle-button"
                    x-show="isProductSelected('{{ product.id }}')"
                    @click="removeFromBundle('{{ product.id }}')">
              Remove
            </button>
            
            <!-- Variant Selector -->
            <div x-show="showVariants" 
                 x-transition
                 class="bundle-variant-selector">
              {% for variant in product.variants %}
                <button class="bundle-select"
                        @click="addToBundle({
                          id: '{{ product.id }}',
                          variant_id: '{{ variant.id }}',
                          title: '{{ product.title | escape }}',
                          price: {{ variant.price }},
                          variant_title: '{{ variant.title | escape }}'
                        }); showVariants = false">
                  {{ variant.title }}
                </button>
              {% endfor %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- Bundle View -->
  <div class="bundle-view" x-show="isViewOpen" x-transition>
    <div class="bundle-view__content">
      <div class="bundle-view-header">
        <h3>Your Box</h3>
        <button class="close-button" @click="toggleView()">Close</button>
      </div>
      
      <!-- Empty state message -->
      <div class="bundle-view-empty" x-show="selectedItems.length === 0">
        <h4>Your bundle is empty</h4>
        <p>{{ section.settings.empty_state_message }}</p>
      </div>
      
      <!-- Selected items -->
      <template x-for="item in selectedItems" :key="item.variant_id">
        <div class="bundle-item">
          <h4 class="bundle-item-title" x-text="item.title"></h4>
          <span class="bundle-item-price" x-text="formatMoney(item.price)"></span>
          <button class="bundle-item-remove"
                  @click="removeFromBundle(item.id)">
            Remove
          </button>
        </div>
      </template>
      
      <!-- Bundle totals -->
      <div class="bundle-total" x-show="selectedItems.length > 0">
        <p>
          <span>Original Total:</span>
          <span x-text="formatMoney(originalTotal)"></span>
        </p>
        <p>
          <span>Bundle Discount:</span>
          <span x-text="discountPercentage + '%'"></span>
        </p>
        <p>
          <span>You Save:</span>
          <span class="savings" x-text="formatMoney(savings)"></span>
        </p>
        <p class="final-price">
          <span>Final Price:</span>
          <span x-text="formatMoney(finalPrice)"></span>
        </p>
      </div>

      <!-- Bundle actions -->
      <div class="bundle-actions" x-show="selectedItems.length > 0">
        <button class="add-bundle-to-cart"
                @click="addBundleToCart()"
                :disabled="selectedItems.length < bundleSize || loading">
          <span x-show="!loading">Add Bundle to Cart</span>
          <span x-show="loading">Adding to Cart...</span>
        </button>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Bundle Builder",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Build Your Bundle"
    },
    {
      "type": "number",
      "id": "bundle_size",
      "label": "Number of Items in Bundle",
      "default": 7
    },
    {
      "type": "number",
      "id": "discount_percentage",
      "label": "Bundle Discount Percentage",
      "default": 20
    },
    {
      "type": "collection",
      "id": "bundle_collection",
      "label": "Bundle Products Collection"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#ffffff"
    },
    {
      "type": "text",
      "id": "empty_state_message",
      "label": "Empty State Message",
      "default": "Start building your custom bundle to save!"
    },
    {
      "type": "text",
      "id": "progress_message",
      "label": "Progress Message",
      "default": "Select {remaining} more items to complete your bundle"
    }
  ],
  "presets": [
    {
      "name": "Bundle Builder",
      "category": "Custom"
    }
  ]
}
{% endschema %} 